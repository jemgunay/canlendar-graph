// Code generated by MockGen. DO NOT EDIT.
// Source: calendar.go

// Package mock_calendar is a generated GoMock package.
package mock_calendar

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	calendar "github.com/jemgunay/canlendar-graph/calendar"
	context "golang.org/x/net/context"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetcher) Fetch(ctx context.Context, startTime time.Time) (calendar.EventIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, startTime)
	ret0, _ := ret[0].(calendar.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetcherMockRecorder) Fetch(ctx, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetcher)(nil).Fetch), ctx, startTime)
}

// MockEventIterator is a mock of EventIterator interface.
type MockEventIterator struct {
	ctrl     *gomock.Controller
	recorder *MockEventIteratorMockRecorder
}

// MockEventIteratorMockRecorder is the mock recorder for MockEventIterator.
type MockEventIteratorMockRecorder struct {
	mock *MockEventIterator
}

// NewMockEventIterator creates a new mock instance.
func NewMockEventIterator(ctrl *gomock.Controller) *MockEventIterator {
	mock := &MockEventIterator{ctrl: ctrl}
	mock.recorder = &MockEventIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventIterator) EXPECT() *MockEventIteratorMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockEventIterator) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockEventIteratorMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockEventIterator)(nil).Count))
}

// Next mocks base method.
func (m *MockEventIterator) Next() (calendar.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(calendar.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockEventIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockEventIterator)(nil).Next))
}
